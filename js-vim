#!/usr/bin/env node

var stdin = process.stdin;

var vim = require('./lib/Vim');

var render = require('../term-render');

stdin.setRawMode( true );

stdin.resume();

stdin.setEncoding( 'utf8' );

// http://nodejs.org/api.html#_child_processes
var sys = require('sys')
var exec = require('child_process').exec;
var child;

var lines = 100;
var columns = 150;

// executes `pwd`
exec("tput lines", function (error, stdout, stderr) {
	lines = parseInt(stdout);
});
exec("tput cols", function (error, stdout, stderr) {
	columns = parseInt(stdout);
});





var CSI = function(arg) {
	process.stdout.write('\u001B[' + arg);
}

CSI('1;1f'); //move cursor to zero
CSI('J'); //clear screen



stdin.on( 'data', function( key ){
  // ctrl-c ( end of text )
  if ( key === '\u0003' ) {
    process.exit();
  }
  // write the key to stdout all normal like
  switch(key) {
    case '`':
      vim.exec('esc');
      break;
    default:
      vim.exec(key);
      break;
  }
  _text = '';

  var reset = function() {
  	process.stdout.write('\033[0m');
  }

    var blue = function() {
  	process.stdout.write('\033[34m');
  }

  var write = function(text) {

  	CSI('1;1f');

  	var pos = 0;
  	for(var i in text) {
  		reset();
  		pos++;
  		CSI('' + pos + 'G');
  		process.stdout.write(text[i]);
  	}



  	blue();
  	var ct = 1;
  	while(ct < lines) {
  		CSI('1E');
  		process.stdout.write('~');
  	}

  	reset();
  	

  	_text = text;




  };

//hide cursor
CSI('?25l');


  vim.on('change:text', function() {
  	var text = vim.text();

  	write(text);
  })
});

  setTimeout(function() {
  	//process.stdout.write('\u001B[2J\u001B[0;0f');
  },200)

